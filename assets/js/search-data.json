{
  
    
        "post0": {
            "title": "x509 Certificate Fingerprinting In Golang",
            "content": "This website serves content to your browser over an encrypted and authenticated tunnel. The S in https stands for secure via TLS (Transport Layer Security). To do so, it relies on a public key certificate associated with the domain name and issued by a certificate authority (CA) which acts as a trusted third party. I&#39;m using github pages to host this page. Looking at the certificate in Brave&#39;s certificate viewer, you see github pages uses lets encrypt as the CA. (If you are looking at this tutorial after November 4th, 2020, you&#39;ll see different values.) . . Looking at the same viewer, you&#39;ll also notice that Brave shows two fingerprints: one for the (no longer secure) SHA-1 algorithm and the other for the SHA256, a 512 bit block hash in the SHA-2 family. If you aren&#39;t doing much work with public key cryptography, this may be the first time you noticed the fingerprint section. However, if you use computers in any sophisticated capacity, you&#39;ve probably probably have seen hashes of public key artifacts in other contexts. In particular, you may have seen a message like this, . The authenticity of host &#39;&lt;host&gt;&#39; can&#39;t be established. ECDSA key fingerprint is SHA256:&lt;BASE64-encoded-SHA256-Fingerprint&gt;. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &#39;&lt;host&gt;&#39; (ECDSA) to the list of known hosts. . when connecting to a new SSH host using OpenSSH. This user experience is called TOFU: Trust on First Use. Since SSH has not seen this key before (or rather, it&#39;s fingerprint) it prompts you whether or not you would like to trust it. If you confirm with y, future sessions won&#39;t prompt you again, so long as the fingerprint of the key does not change. . While TOFU is a questionable practice with respect to security (how often do you actually confirm the fingerprint with an administrator or in some database before confirmation?), this use of fingerprinting is common in applications using TLS. This notebook shows you how to use both OpenSSL and golang to extract equivalent fingerprints. It is fully self-contained — if you have a Golang kernel for Jupyter, you can run it. . Gold Values from OpenSSL and a PEM-encoded File . First, we&#39;ll set up our imports. If you do any public key cryptography in golang, most of these will be familiar. . import ( &quot;crypto/md5&quot; &quot;crypto/sha1&quot; &quot;crypto/sha256&quot; &quot;crypto/tls&quot; &quot;crypto/x509&quot; &quot;encoding/pem&quot; &quot;fmt&quot; &quot;hash&quot; &quot;os&quot; &quot;os/exec&quot; &quot;io/ioutil&quot; &quot;strings&quot; ) . Next, we&#39;ll write a fixed, minimal ASCII/PEM-encoded certificate so that this tutorial won&#39;t change over time. . const knownCert = `--BEGIN CERTIFICATE-- MIIBUzCB+qADAgECAhR7l0x6Cgyt0hWRxQXKDB4NIgKM2TAKBggqhkjOPQQDAjAN MQswCQYDVQQGEwJVSzAeFw0yMDA4MTIyMzIwMTBaFw0zMDA4MTAyMzIwMTBaMA0x CzAJBgNVBAYTAlVLMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEJBJm0831oqwg 6daZcuB+vgeRFinuuT6hU2NxboDbfeyGUjv91lBWnCU1YL27d7PhZVabyNtQm0OZ bmveMV9v7aM4MDYwDgYDVR0PAQH/BAQDAgKEMBMGA1UdJQQMMAoGCCsGAQUFBwMB MA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDSAAwRQIgWawEXk36iBObsLyr ZPzIlIN91/85aix5kYRxAPDIkOUCIQDxsqXNpb6hFTiwLnj2stl2hwcxtcTB8bnS gniTVdxCTw== --END CERTIFICATE-- ` const certFile = &quot;test.crt&quot; err := ioutil.WriteFile(certFile, []byte(knownCert), os.ModePerm) if err != nil { panic(err) } . With a certificate in hand (on disk), we can use openssl to compute the fingerprints. OpenSSL is robust and enjoys the battle-tested upside of Linus&#39;s Law, so it&#39;s a useful way to compute the expected outputs using MD5, SHA1, SHA256. . // Extract the fingerprint from command execution in a generic way func extractFingerprint(cmd *exec.Cmd) string { b, err := cmd.Output() if err != nil { panic(err) } return strings.Split(strings.TrimSpace(string(b)), &quot;=&quot;)[1] } knownMD5 := extractFingerprint(exec.Command(&quot;openssl&quot;, &quot;x509&quot;, &quot;-noout&quot;, &quot;-fingerprint&quot;, &quot;-md5&quot;, &quot;-in&quot;, certFile)) knownSHA1 := extractFingerprint(exec.Command(&quot;openssl&quot;, &quot;x509&quot;, &quot;-noout&quot;, &quot;-fingerprint&quot;, &quot;-sha1&quot;, &quot;-in&quot;, certFile)) knownSHA256 := extractFingerprint(exec.Command(&quot;openssl&quot;, &quot;x509&quot;, &quot;-noout&quot;, &quot;-fingerprint&quot;, &quot;-sha256&quot;, &quot;-in&quot;, certFile)) _, _ := fmt.Printf(&quot;MD5 = %s nSHA1 = %s nSHA256 = %s n&quot;, knownMD5, knownSHA1, knownSHA256) . MD5 = 04:56:1B:6C:AF:DE:39:72:18:74:AE:E0:F9:5B:2D:DE SHA1 = 3A:1F:3B:C0:B3:A4:5B:FE:D6:D7:87:5E:C7:1D:E4:C4:7B:EA:B0:C0 SHA256 = D7:AD:9F:D5:C4:F4:BD:23:7B:DE:BF:7F:30:C0:D8:99:7A:C8:72:94:DE:DA:25:C7:4E:6C:3B:06:C4:EB:4E:C0 . Fingerprinting without x509 Parsing . With the gold values computed, we can now use Go, instead. First, we&#39;ll load the certificate file and decode the PEM data. . b, err := ioutil.ReadFile(certFile) if err != nil { panic(err) } block, _ := pem.Decode(b) if block == nil { panic(&quot;doesn&#39;t seem like a PEM block&quot;) } . Now, we&#39;ll compute the MD5, SHA1, and SHA256, hashes from the PEM block&#39;s Bytes field. . // Normalize the hash so it is equal to the openssl output func normalizeHash(h hash.Hash, b []byte) string { _, err := h.Write(b) if err != nil { panic(err) } digest := h.Sum([]byte{}) var parts []string for _, octet := range digest { parts = append(parts, fmt.Sprintf(&quot;%02X&quot;, octet)) } return strings.Join(parts, &quot;:&quot;) } _, _ := fmt.Printf(&quot;MD5 Equal = %v nSHA1 Equal = %v nSHA256 Equal = %v n&quot;, normalizeHash(md5.New(), block.Bytes) == knownMD5, normalizeHash(sha1.New(), block.Bytes) == knownSHA1, normalizeHash(sha256.New(), block.Bytes) == knownSHA256, ) . MD5 Equal = true SHA1 Equal = true SHA256 Equal = true . They are equal. The go code and the OpenSSL commands compute the same thing. . Fingerprinting with x509 Parsing . This part is a little contrived. But, often you have ready access to a *x509.Certificate. If you do, the Raw field contains the same data as the block bytes, . cert, err := x509.ParseCertificate(block.Bytes) if block == nil { panic(&quot;doesn&#39;t seem like a PEM block&quot;) } _, _ := fmt.Printf(&quot;MD5 Equal = %v nSHA1 Equal = %v nSHA256 Equal = %v n&quot;, normalizeHash(md5.New(), cert.Raw) == knownMD5, normalizeHash(sha1.New(), cert.Raw) == knownSHA1, normalizeHash(sha256.New(), cert.Raw) == knownSHA256, ) . MD5 Equal = true SHA1 Equal = true SHA256 Equal = true . Fingerprinting from a Peer Certificate . Finally, most code that uses net makes the peer certificates for an active connection available in some way. This example shows how to take the fingerprint of that certificate. . conn, err := tls.Dial(&quot;tcp&quot;, &quot;code.johnbnelson.com:443&quot;, &amp;tls.Config{}) if err != nil { panic(err) } // There may be more than one certificate. This example may break. fetchedCert := conn.ConnectionState().PeerCertificates[0] conn.Close() normalizeHash(sha256.New(), fetchedCert.Raw) . D7:AB:C0:10:83:65:B2:59:CA:88:5B:94:43:EF:86:E5:49:B6:F0:57:38:4F:4F:33:BA:27:8C:DB:D6:D2:88:2B . Conclusion . Go is batteries included from the perspective of public key cryptography. The most complicated part of this tutorial was string manipulation, which you don&#39;t have to actually do. The only general parting advice is, as always, don&#39;t use MD5 or SHA1 — they are insecure. .",
            "url": "https://code.johnbnelson.com/go/crypto/2020/08/12/certificate-fingerprinting-in-golang.html",
            "relUrl": "/go/crypto/2020/08/12/certificate-fingerprinting-in-golang.html",
            "date": " • Aug 12, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://code.johnbnelson.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://code.johnbnelson.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Johnny. . You can find me on twitter as @generativist I talk a lot on there. .",
          "url": "https://code.johnbnelson.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://code.johnbnelson.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}